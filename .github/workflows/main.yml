name: Build and Deploy

on:
  push:
    branches:
      - '**'

env:
  REGISTRY: ghcr.io
  SERVER_IMAGE_NAME: server
  TELEGRAM_BOT_IMAGE_NAME: telegram-bot

jobs:
#  test-server:
#    name: Run Server Tests
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: '3.12'
#
#      - name: Cache pip
#        uses: actions/cache@v4
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r server/requirements.txt
#
#      - name: Run tests with pytest
#        run: |
#          cd server/
#          pytest --maxfail=1 --disable-warnings -q

  build-server:
    name: Build Server Image
    runs-on: ubuntu-latest
#    needs: test-server
    steps:
      - uses: actions/checkout@v4
      - name: Build Image
        run: |
          cd server
          docker build -t ${{ env.SERVER_IMAGE_NAME }}:latest .

#  test-bot:
#    name: Run Telegram Bot Tests
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: '3.12'
#
#      - name: Cache pip
#        uses: actions/cache@v4
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r server/requirements.txt
#
#      - name: Run tests with pytest
#        run: |
#          cd telegram-bot/
#          pytest --maxfail=1 --disable-warnings -q

  build-bot:
    name: Build Telegram Bot Image
    runs-on: ubuntu-latest
#    needs: test-server
    steps:
      - uses: actions/checkout@v4
      - name: Build Image
        run: |
          cd telegram-bot
          docker build -t ${{ env.TELEGRAM_BOT_IMAGE_NAME }}:latest .

  deploy-server:
    name: Build and Push Server Image
    runs-on: ubuntu-latest
#    needs: test-server
#    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v4

      - name: Information
        run: |
          echo "Registry: " ${{ env.REGISTRY }}
          echo "Actor: " ${{ github.actor }}
          echo "repository_owner: " ${{ github.repository_owner }}

      - name: Login into ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.SERVER_IMAGE_NAME }}

      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-telegram-bot:
    name: Build and Push Telegram Bot Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Login into ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.TELEGRAM_BOT_IMAGE_NAME }}

      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./telegram-bot
          file: ./telegram-bot/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
